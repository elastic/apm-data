// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: stacktrace.proto

package modelpb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StacktraceFrame struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Vars                []*KeyValue            `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty"`
	Lineno              *uint32                `protobuf:"varint,2,opt,name=lineno,proto3,oneof" json:"lineno,omitempty"`
	Colno               *uint32                `protobuf:"varint,3,opt,name=colno,proto3,oneof" json:"colno,omitempty"`
	Filename            string                 `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	Classname           string                 `protobuf:"bytes,5,opt,name=classname,proto3" json:"classname,omitempty"`
	ContextLine         string                 `protobuf:"bytes,6,opt,name=context_line,json=contextLine,proto3" json:"context_line,omitempty"`
	Module              string                 `protobuf:"bytes,7,opt,name=module,proto3" json:"module,omitempty"`
	Function            string                 `protobuf:"bytes,8,opt,name=function,proto3" json:"function,omitempty"`
	AbsPath             string                 `protobuf:"bytes,9,opt,name=abs_path,json=absPath,proto3" json:"abs_path,omitempty"`
	SourcemapError      string                 `protobuf:"bytes,10,opt,name=sourcemap_error,json=sourcemapError,proto3" json:"sourcemap_error,omitempty"`
	Original            *Original              `protobuf:"bytes,11,opt,name=original,proto3" json:"original,omitempty"`
	PreContext          []string               `protobuf:"bytes,12,rep,name=pre_context,json=preContext,proto3" json:"pre_context,omitempty"`
	PostContext         []string               `protobuf:"bytes,13,rep,name=post_context,json=postContext,proto3" json:"post_context,omitempty"`
	LibraryFrame        bool                   `protobuf:"varint,14,opt,name=library_frame,json=libraryFrame,proto3" json:"library_frame,omitempty"`
	SourcemapUpdated    bool                   `protobuf:"varint,15,opt,name=sourcemap_updated,json=sourcemapUpdated,proto3" json:"sourcemap_updated,omitempty"`
	ExcludeFromGrouping bool                   `protobuf:"varint,16,opt,name=exclude_from_grouping,json=excludeFromGrouping,proto3" json:"exclude_from_grouping,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StacktraceFrame) Reset() {
	*x = StacktraceFrame{}
	mi := &file_stacktrace_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StacktraceFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StacktraceFrame) ProtoMessage() {}

func (x *StacktraceFrame) ProtoReflect() protoreflect.Message {
	mi := &file_stacktrace_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StacktraceFrame.ProtoReflect.Descriptor instead.
func (*StacktraceFrame) Descriptor() ([]byte, []int) {
	return file_stacktrace_proto_rawDescGZIP(), []int{0}
}

func (x *StacktraceFrame) GetVars() []*KeyValue {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *StacktraceFrame) GetLineno() uint32 {
	if x != nil && x.Lineno != nil {
		return *x.Lineno
	}
	return 0
}

func (x *StacktraceFrame) GetColno() uint32 {
	if x != nil && x.Colno != nil {
		return *x.Colno
	}
	return 0
}

func (x *StacktraceFrame) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StacktraceFrame) GetClassname() string {
	if x != nil {
		return x.Classname
	}
	return ""
}

func (x *StacktraceFrame) GetContextLine() string {
	if x != nil {
		return x.ContextLine
	}
	return ""
}

func (x *StacktraceFrame) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *StacktraceFrame) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *StacktraceFrame) GetAbsPath() string {
	if x != nil {
		return x.AbsPath
	}
	return ""
}

func (x *StacktraceFrame) GetSourcemapError() string {
	if x != nil {
		return x.SourcemapError
	}
	return ""
}

func (x *StacktraceFrame) GetOriginal() *Original {
	if x != nil {
		return x.Original
	}
	return nil
}

func (x *StacktraceFrame) GetPreContext() []string {
	if x != nil {
		return x.PreContext
	}
	return nil
}

func (x *StacktraceFrame) GetPostContext() []string {
	if x != nil {
		return x.PostContext
	}
	return nil
}

func (x *StacktraceFrame) GetLibraryFrame() bool {
	if x != nil {
		return x.LibraryFrame
	}
	return false
}

func (x *StacktraceFrame) GetSourcemapUpdated() bool {
	if x != nil {
		return x.SourcemapUpdated
	}
	return false
}

func (x *StacktraceFrame) GetExcludeFromGrouping() bool {
	if x != nil {
		return x.ExcludeFromGrouping
	}
	return false
}

type Original struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AbsPath       string                 `protobuf:"bytes,1,opt,name=abs_path,json=absPath,proto3" json:"abs_path,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Classname     string                 `protobuf:"bytes,3,opt,name=classname,proto3" json:"classname,omitempty"`
	Lineno        *uint32                `protobuf:"varint,4,opt,name=lineno,proto3,oneof" json:"lineno,omitempty"`
	Colno         *uint32                `protobuf:"varint,5,opt,name=colno,proto3,oneof" json:"colno,omitempty"`
	Function      string                 `protobuf:"bytes,6,opt,name=function,proto3" json:"function,omitempty"`
	LibraryFrame  bool                   `protobuf:"varint,7,opt,name=library_frame,json=libraryFrame,proto3" json:"library_frame,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Original) Reset() {
	*x = Original{}
	mi := &file_stacktrace_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Original) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Original) ProtoMessage() {}

func (x *Original) ProtoReflect() protoreflect.Message {
	mi := &file_stacktrace_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Original.ProtoReflect.Descriptor instead.
func (*Original) Descriptor() ([]byte, []int) {
	return file_stacktrace_proto_rawDescGZIP(), []int{1}
}

func (x *Original) GetAbsPath() string {
	if x != nil {
		return x.AbsPath
	}
	return ""
}

func (x *Original) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Original) GetClassname() string {
	if x != nil {
		return x.Classname
	}
	return ""
}

func (x *Original) GetLineno() uint32 {
	if x != nil && x.Lineno != nil {
		return *x.Lineno
	}
	return 0
}

func (x *Original) GetColno() uint32 {
	if x != nil && x.Colno != nil {
		return *x.Colno
	}
	return 0
}

func (x *Original) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *Original) GetLibraryFrame() bool {
	if x != nil {
		return x.LibraryFrame
	}
	return false
}

var File_stacktrace_proto protoreflect.FileDescriptor

const file_stacktrace_proto_rawDesc = "" +
	"\n" +
	"\x10stacktrace.proto\x12\x0eelastic.apm.v1\x1a\x0ekeyvalue.proto\"\xe1\x04\n" +
	"\x0fStacktraceFrame\x12,\n" +
	"\x04vars\x18\x01 \x03(\v2\x18.elastic.apm.v1.KeyValueR\x04vars\x12\x1b\n" +
	"\x06lineno\x18\x02 \x01(\rH\x00R\x06lineno\x88\x01\x01\x12\x19\n" +
	"\x05colno\x18\x03 \x01(\rH\x01R\x05colno\x88\x01\x01\x12\x1a\n" +
	"\bfilename\x18\x04 \x01(\tR\bfilename\x12\x1c\n" +
	"\tclassname\x18\x05 \x01(\tR\tclassname\x12!\n" +
	"\fcontext_line\x18\x06 \x01(\tR\vcontextLine\x12\x16\n" +
	"\x06module\x18\a \x01(\tR\x06module\x12\x1a\n" +
	"\bfunction\x18\b \x01(\tR\bfunction\x12\x19\n" +
	"\babs_path\x18\t \x01(\tR\aabsPath\x12'\n" +
	"\x0fsourcemap_error\x18\n" +
	" \x01(\tR\x0esourcemapError\x124\n" +
	"\boriginal\x18\v \x01(\v2\x18.elastic.apm.v1.OriginalR\boriginal\x12\x1f\n" +
	"\vpre_context\x18\f \x03(\tR\n" +
	"preContext\x12!\n" +
	"\fpost_context\x18\r \x03(\tR\vpostContext\x12#\n" +
	"\rlibrary_frame\x18\x0e \x01(\bR\flibraryFrame\x12+\n" +
	"\x11sourcemap_updated\x18\x0f \x01(\bR\x10sourcemapUpdated\x122\n" +
	"\x15exclude_from_grouping\x18\x10 \x01(\bR\x13excludeFromGroupingB\t\n" +
	"\a_linenoB\b\n" +
	"\x06_colno\"\xed\x01\n" +
	"\bOriginal\x12\x19\n" +
	"\babs_path\x18\x01 \x01(\tR\aabsPath\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1c\n" +
	"\tclassname\x18\x03 \x01(\tR\tclassname\x12\x1b\n" +
	"\x06lineno\x18\x04 \x01(\rH\x00R\x06lineno\x88\x01\x01\x12\x19\n" +
	"\x05colno\x18\x05 \x01(\rH\x01R\x05colno\x88\x01\x01\x12\x1a\n" +
	"\bfunction\x18\x06 \x01(\tR\bfunction\x12#\n" +
	"\rlibrary_frame\x18\a \x01(\bR\flibraryFrameB\t\n" +
	"\a_linenoB\b\n" +
	"\x06_colnoB+Z)github.com/elastic/apm-data/model/modelpbb\x06proto3"

var (
	file_stacktrace_proto_rawDescOnce sync.Once
	file_stacktrace_proto_rawDescData []byte
)

func file_stacktrace_proto_rawDescGZIP() []byte {
	file_stacktrace_proto_rawDescOnce.Do(func() {
		file_stacktrace_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stacktrace_proto_rawDesc), len(file_stacktrace_proto_rawDesc)))
	})
	return file_stacktrace_proto_rawDescData
}

var file_stacktrace_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stacktrace_proto_goTypes = []any{
	(*StacktraceFrame)(nil), // 0: elastic.apm.v1.StacktraceFrame
	(*Original)(nil),        // 1: elastic.apm.v1.Original
	(*KeyValue)(nil),        // 2: elastic.apm.v1.KeyValue
}
var file_stacktrace_proto_depIdxs = []int32{
	2, // 0: elastic.apm.v1.StacktraceFrame.vars:type_name -> elastic.apm.v1.KeyValue
	1, // 1: elastic.apm.v1.StacktraceFrame.original:type_name -> elastic.apm.v1.Original
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_stacktrace_proto_init() }
func file_stacktrace_proto_init() {
	if File_stacktrace_proto != nil {
		return
	}
	file_keyvalue_proto_init()
	file_stacktrace_proto_msgTypes[0].OneofWrappers = []any{}
	file_stacktrace_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stacktrace_proto_rawDesc), len(file_stacktrace_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stacktrace_proto_goTypes,
		DependencyIndexes: file_stacktrace_proto_depIdxs,
		MessageInfos:      file_stacktrace_proto_msgTypes,
	}.Build()
	File_stacktrace_proto = out.File
	file_stacktrace_proto_goTypes = nil
	file_stacktrace_proto_depIdxs = nil
}
