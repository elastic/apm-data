// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: service.proto

package modelpb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Origin        *ServiceOrigin         `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Target        *ServiceTarget         `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Language      *Language              `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Runtime       *Runtime               `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Framework     *Framework             `protobuf:"bytes,5,opt,name=framework,proto3" json:"framework,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Environment   string                 `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	Node          *ServiceNode           `protobuf:"bytes,9,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetOrigin() *ServiceOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Service) GetTarget() *ServiceTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Service) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Service) GetRuntime() *Runtime {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Service) GetFramework() *Framework {
	if x != nil {
		return x.Framework
	}
	return nil
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Service) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Service) GetNode() *ServiceNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type ServiceOrigin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceOrigin) Reset() {
	*x = ServiceOrigin{}
	mi := &file_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOrigin) ProtoMessage() {}

func (x *ServiceOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOrigin.ProtoReflect.Descriptor instead.
func (*ServiceOrigin) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceOrigin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceOrigin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceOrigin) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ServiceTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceTarget) Reset() {
	*x = ServiceTarget{}
	mi := &file_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTarget) ProtoMessage() {}

func (x *ServiceTarget) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTarget.ProtoReflect.Descriptor instead.
func (*ServiceTarget) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Language struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Language) Reset() {
	*x = Language{}
	mi := &file_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Language) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Runtime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	mi := &file_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *Runtime) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Runtime) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Framework struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Framework) Reset() {
	*x = Framework{}
	mi := &file_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Framework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework) ProtoMessage() {}

func (x *Framework) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework.ProtoReflect.Descriptor instead.
func (*Framework) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *Framework) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Framework) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ServiceNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceNode) Reset() {
	*x = ServiceNode{}
	mi := &file_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceNode) ProtoMessage() {}

func (x *ServiceNode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceNode.ProtoReflect.Descriptor instead.
func (*ServiceNode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_service_proto protoreflect.FileDescriptor

const file_service_proto_rawDesc = "" +
	"\n" +
	"\rservice.proto\x12\x0eelastic.apm.v1\"\x9a\x03\n" +
	"\aService\x125\n" +
	"\x06origin\x18\x01 \x01(\v2\x1d.elastic.apm.v1.ServiceOriginR\x06origin\x125\n" +
	"\x06target\x18\x02 \x01(\v2\x1d.elastic.apm.v1.ServiceTargetR\x06target\x124\n" +
	"\blanguage\x18\x03 \x01(\v2\x18.elastic.apm.v1.LanguageR\blanguage\x121\n" +
	"\aruntime\x18\x04 \x01(\v2\x17.elastic.apm.v1.RuntimeR\aruntime\x127\n" +
	"\tframework\x18\x05 \x01(\v2\x19.elastic.apm.v1.FrameworkR\tframework\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\a \x01(\tR\aversion\x12 \n" +
	"\venvironment\x18\b \x01(\tR\venvironment\x12/\n" +
	"\x04node\x18\t \x01(\v2\x1b.elastic.apm.v1.ServiceNodeR\x04node\"M\n" +
	"\rServiceOrigin\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\"7\n" +
	"\rServiceTarget\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\"8\n" +
	"\bLanguage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"7\n" +
	"\aRuntime\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"9\n" +
	"\tFramework\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"!\n" +
	"\vServiceNode\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04nameB+Z)github.com/elastic/apm-data/model/modelpbb\x06proto3"

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData []byte
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)))
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_service_proto_goTypes = []any{
	(*Service)(nil),       // 0: elastic.apm.v1.Service
	(*ServiceOrigin)(nil), // 1: elastic.apm.v1.ServiceOrigin
	(*ServiceTarget)(nil), // 2: elastic.apm.v1.ServiceTarget
	(*Language)(nil),      // 3: elastic.apm.v1.Language
	(*Runtime)(nil),       // 4: elastic.apm.v1.Runtime
	(*Framework)(nil),     // 5: elastic.apm.v1.Framework
	(*ServiceNode)(nil),   // 6: elastic.apm.v1.ServiceNode
}
var file_service_proto_depIdxs = []int32{
	1, // 0: elastic.apm.v1.Service.origin:type_name -> elastic.apm.v1.ServiceOrigin
	2, // 1: elastic.apm.v1.Service.target:type_name -> elastic.apm.v1.ServiceTarget
	3, // 2: elastic.apm.v1.Service.language:type_name -> elastic.apm.v1.Language
	4, // 3: elastic.apm.v1.Service.runtime:type_name -> elastic.apm.v1.Runtime
	5, // 4: elastic.apm.v1.Service.framework:type_name -> elastic.apm.v1.Framework
	6, // 5: elastic.apm.v1.Service.node:type_name -> elastic.apm.v1.ServiceNode
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
